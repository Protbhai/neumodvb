#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.0.4 on Thu Jan  5 17:44:19 2023
#

import wx

# begin wxGlade: dependencies
import gettext
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class PreferencesDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: PreferencesDialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetSize((633, 636))
        self.SetTitle(_("NeumoDVB preferences"))

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        self.preferences_notebook = wx.Notebook(self, wx.ID_ANY)
        sizer_1.Add(self.preferences_notebook, 1, wx.ALL | wx.EXPAND, 5)

        self.storage_pane = wx.Panel(self.preferences_notebook, wx.ID_ANY)
        self.preferences_notebook.AddPage(self.storage_pane, _("Storage"))

        sizer_5 = wx.BoxSizer(wx.VERTICAL)

        grid_sizer_1 = wx.FlexGridSizer(6, 2, 5, 5)
        sizer_5.Add(grid_sizer_1, 1, wx.EXPAND, 0)

        label_1 = wx.StaticText(self.storage_pane, wx.ID_ANY, _("Database"))
        grid_sizer_1.Add(label_1, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.database_path_text = wx.TextCtrl(self.storage_pane, wx.ID_ANY, _("/mnt/neumo/db"))
        self.database_path_text.SetMinSize((250, -1))
        grid_sizer_1.Add(self.database_path_text, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_2 = wx.StaticText(self.storage_pane, wx.ID_ANY, _("Livebuffers"))
        grid_sizer_1.Add(label_2, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.live_path_text = wx.TextCtrl(self.storage_pane, wx.ID_ANY, _("/mnt/neumo/live"))
        self.live_path_text.SetMinSize((250, -1))
        grid_sizer_1.Add(self.live_path_text, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_3 = wx.StaticText(self.storage_pane, wx.ID_ANY, _("Recordings"))
        grid_sizer_1.Add(label_3, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.rec_path = wx.TextCtrl(self.storage_pane, wx.ID_ANY, _("/mnt/neumo/recordings"))
        self.rec_path.SetMinSize((250, -1))
        grid_sizer_1.Add(self.rec_path, 0, 0, 0)

        label_4 = wx.StaticText(self.storage_pane, wx.ID_ANY, _("Spectra"))
        grid_sizer_1.Add(label_4, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.spectrum_path = wx.TextCtrl(self.storage_pane, wx.ID_ANY, _("/mnt/neumo/spectrum"))
        self.spectrum_path.SetMinSize((250, -1))
        grid_sizer_1.Add(self.spectrum_path, 0, 0, 0)

        label_6 = wx.StaticText(self.storage_pane, wx.ID_ANY, _("config dir"))
        grid_sizer_1.Add(label_6, 0, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)

        self.config_path = wx.TextCtrl(self.storage_pane, wx.ID_ANY, _("~/.config/neumodvb/"))
        self.config_path.SetMinSize((250, -1))
        grid_sizer_1.Add(self.config_path, 2, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 1)

        grid_sizer_1.Add((0, 0), 0, 0, 0)

        grid_sizer_1.Add((0, 0), 0, 0, 0)

        self.configfile_pane = wx.Panel(self.preferences_notebook, wx.ID_ANY)
        self.preferences_notebook.AddPage(self.configfile_pane, _("Config files"))

        grid_sizer_2 = wx.FlexGridSizer(6, 2, 5, 5)

        label_5 = wx.StaticText(self.configfile_pane, wx.ID_ANY, _("Live overlay skin"))
        grid_sizer_2.Add(label_5, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.gui_svg_path = wx.TextCtrl(self.configfile_pane, wx.ID_ANY, _("gui.svg"))
        self.gui_svg_path.SetMinSize((250, -1))
        grid_sizer_2.Add(self.gui_svg_path, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_8 = wx.StaticText(self.configfile_pane, wx.ID_ANY, _("mpv"))
        grid_sizer_2.Add(label_8, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.gui_svg_path_copy_1 = wx.TextCtrl(self.configfile_pane, wx.ID_ANY, _("mpv/mpv.conf"))
        self.gui_svg_path_copy_1.SetMinSize((250, -1))
        grid_sizer_2.Add(self.gui_svg_path_copy_1, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_7 = wx.StaticText(self.configfile_pane, wx.ID_ANY, _("Log4cxx"))
        grid_sizer_2.Add(label_7, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.gui_svg_path_copy = wx.TextCtrl(self.configfile_pane, wx.ID_ANY, _("neumo.xml"))
        self.gui_svg_path_copy.SetMinSize((250, -1))
        grid_sizer_2.Add(self.gui_svg_path_copy, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        grid_sizer_2.Add((0, 0), 0, 0, 0)

        grid_sizer_2.Add((0, 0), 0, 0, 0)

        grid_sizer_2.Add((0, 0), 0, 0, 0)

        grid_sizer_2.Add((0, 0), 0, 0, 0)

        grid_sizer_2.Add((0, 0), 0, 0, 0)

        grid_sizer_2.Add((0, 0), 0, 0, 0)

        self.record_pane = wx.Panel(self.preferences_notebook, wx.ID_ANY)
        self.preferences_notebook.AddPage(self.record_pane, _("Record"))

        grid_sizer_3 = wx.FlexGridSizer(8, 2, 5, 5)

        label_9 = wx.StaticText(self.record_pane, wx.ID_ANY, _("Default record time"))
        grid_sizer_3.Add(label_9, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.default_record_time_text = wx.TextCtrl(self.record_pane, wx.ID_ANY, _("120"))
        self.default_record_time_text.SetMinSize((250, -1))
        self.default_record_time_text.SetToolTip(_("Duration of unscheduled recordings (min)"))
        grid_sizer_3.Add(self.default_record_time_text, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_10 = wx.StaticText(self.record_pane, wx.ID_ANY, _("Pre-record time"))
        grid_sizer_3.Add(label_10, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.pre_record_time_text = wx.TextCtrl(self.record_pane, wx.ID_ANY, _("1"))
        self.pre_record_time_text.SetMinSize((250, -1))
        self.pre_record_time_text.SetToolTip(_("Time to start recording before start of program (min or min:sec)"))
        grid_sizer_3.Add(self.pre_record_time_text, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_11 = wx.StaticText(self.record_pane, wx.ID_ANY, _("Post-record time"))
        grid_sizer_3.Add(label_11, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.post_record_time_text = wx.TextCtrl(self.record_pane, wx.ID_ANY, _("5"))
        self.post_record_time_text.SetMinSize((250, -1))
        self.post_record_time_text.SetToolTip(_("Time to continue recording after end of program (min or min:sec)"))
        grid_sizer_3.Add(self.post_record_time_text, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_11 = wx.StaticText(self.record_pane, wx.ID_ANY, _("Timeshift duration"))
        grid_sizer_3.Add(label_11, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.timeshift_duration_text = wx.TextCtrl(self.record_pane, wx.ID_ANY, _("120"))
        self.timeshift_duration_text.SetMinSize((250, -1))
        self.timeshift_duration_text.SetToolTip(_("Time for which to keep timeshift data (min)"))
        grid_sizer_3.Add(self.timeshift_duration_text, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_11 = wx.StaticText(self.record_pane, wx.ID_ANY, _("Timeshift buffer retention"))
        grid_sizer_3.Add(label_11, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.timeshift_retention_text = wx.TextCtrl(self.record_pane, wx.ID_ANY, _("5"))
        self.timeshift_retention_text.SetMinSize((250, -1))
        self.timeshift_retention_text.SetToolTip(_("Time for which to preserve livebuffers after tuning to another service (min)"))
        grid_sizer_3.Add(self.timeshift_retention_text, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_11 = wx.StaticText(self.record_pane, wx.ID_ANY, _("Timeshift resolution"))
        grid_sizer_3.Add(label_11, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.timeshift_resolution_text = wx.TextCtrl(self.record_pane, wx.ID_ANY, _("5"))
        self.timeshift_resolution_text.SetMinSize((250, -1))
        self.timeshift_resolution_text.SetToolTip(_("Timeshift resolution (min))"))
        grid_sizer_3.Add(self.timeshift_resolution_text, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        grid_sizer_3.Add((0, 0), 0, 0, 0)

        grid_sizer_3.Add((0, 0), 0, 0, 0)

        grid_sizer_3.Add((0, 0), 0, 0, 0)

        self.preferences_notebook_Tune = wx.Panel(self.preferences_notebook, wx.ID_ANY)
        self.preferences_notebook.AddPage(self.preferences_notebook_Tune, _("Tune"))

        grid_sizer_4 = wx.FlexGridSizer(1, 2, 5, 5)

        tune_may_move_dish_labl = wx.StaticText(self.preferences_notebook_Tune, wx.ID_ANY, _("Alllow moving dish"))
        grid_sizer_4.Add(tune_may_move_dish_labl, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.checkbox_1 = wx.CheckBox(self.preferences_notebook_Tune, wx.ID_ANY, "")
        grid_sizer_4.Add(self.checkbox_1, 0, 0, 0)

        sizer_2 = wx.StdDialogButtonSizer()
        sizer_1.Add(sizer_2, 0, wx.ALIGN_RIGHT | wx.ALL, 4)

        self.button_OK = wx.Button(self, wx.ID_OK, "")
        self.button_OK.SetDefault()
        sizer_2.AddButton(self.button_OK)

        self.button_CANCEL = wx.Button(self, wx.ID_CANCEL, "")
        sizer_2.AddButton(self.button_CANCEL)

        sizer_2.Realize()

        self.preferences_notebook_Tune.SetSizer(grid_sizer_4)

        self.record_pane.SetSizer(grid_sizer_3)

        self.configfile_pane.SetSizer(grid_sizer_2)

        grid_sizer_1.AddGrowableCol(1)

        self.storage_pane.SetSizer(sizer_5)

        self.SetSizer(sizer_1)

        self.SetAffirmativeId(self.button_OK.GetId())
        self.SetEscapeId(self.button_CANCEL.GetId())

        self.Layout()
        # end wxGlade

# end of class PreferencesDialog

class MyApp(wx.App):
    def OnInit(self):
        self.preferences_dialog = PreferencesDialog(None, wx.ID_ANY, "")
        self.SetTopWindow(self.preferences_dialog)
        self.preferences_dialog.ShowModal()
        self.preferences_dialog.Destroy()
        return True

# end of class MyApp

if __name__ == "__main__":
    gettext.install("app") # replace with the appropriate catalog name

    app = MyApp(0)
    app.MainLoop()
