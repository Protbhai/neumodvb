#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.0.5 on Thu Jan 25 01:34:02 2024
#

import wx

# begin wxGlade: dependencies
import gettext
# end wxGlade

# begin wxGlade: extracode
from neumodvb.neumowidgets import DtIntCtrl, DurationTextCtrl
# end wxGlade


class PreferencesDialog_(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: PreferencesDialog_.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetSize((633, 636))
        self.SetTitle(_("NeumoDVB preferences"))

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        self.preferences_notebook = wx.Notebook(self, wx.ID_ANY)
        sizer_1.Add(self.preferences_notebook, 1, wx.ALL | wx.EXPAND, 5)

        self.storage_pane = wx.Panel(self.preferences_notebook, wx.ID_ANY)
        self.preferences_notebook.AddPage(self.storage_pane, _("Storage"))

        sizer_5 = wx.BoxSizer(wx.VERTICAL)

        grid_sizer_1 = wx.FlexGridSizer(4, 2, 5, 5)
        sizer_5.Add(grid_sizer_1, 1, wx.EXPAND, 0)

        label_1 = wx.StaticText(self.storage_pane, wx.ID_ANY, _("Database"))
        grid_sizer_1.Add(label_1, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.db_dir = wx.TextCtrl(self.storage_pane, wx.ID_ANY, "")
        self.db_dir.SetMinSize((250, -1))
        self.db_dir.SetToolTip(_("Directory in which to store neumoDVB databases"))
        grid_sizer_1.Add(self.db_dir, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_2 = wx.StaticText(self.storage_pane, wx.ID_ANY, _("Live buffers"))
        grid_sizer_1.Add(label_2, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.live_path = wx.TextCtrl(self.storage_pane, wx.ID_ANY, "")
        self.live_path.SetMinSize((250, -1))
        self.live_path.SetToolTip(_("Directory in which to store neumoDVB live buffers (needs several Gigabytes)"))
        grid_sizer_1.Add(self.live_path, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_3 = wx.StaticText(self.storage_pane, wx.ID_ANY, _("Recordings"))
        grid_sizer_1.Add(label_3, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.recordings_path = wx.TextCtrl(self.storage_pane, wx.ID_ANY, "")
        self.recordings_path.SetMinSize((250, -1))
        self.recordings_path.SetToolTip(_("Directory in which to store neumoDVB recordings (needs tens or hundreds of Gigabytes)"))
        grid_sizer_1.Add(self.recordings_path, 0, 0, 0)

        label_4 = wx.StaticText(self.storage_pane, wx.ID_ANY, _("Spectra"))
        grid_sizer_1.Add(label_4, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.spectrum_path = wx.TextCtrl(self.storage_pane, wx.ID_ANY, "")
        self.spectrum_path.SetMinSize((250, -1))
        self.spectrum_path.SetToolTip(_("Directory in which to store neumoDVB spectra"))
        grid_sizer_1.Add(self.spectrum_path, 0, 0, 0)

        self.softcam_panel = wx.Panel(self.preferences_notebook, wx.ID_ANY)
        self.preferences_notebook.AddPage(self.softcam_panel, _("Softcam"))

        grid_sizer_2 = wx.FlexGridSizer(3, 2, 5, 5)

        softcam_server_label = wx.StaticText(self.softcam_panel, wx.ID_ANY, _("Server"))
        grid_sizer_2.Add(softcam_server_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.softcam_server = wx.TextCtrl(self.softcam_panel, wx.ID_ANY, "")
        self.softcam_server.SetMinSize((250, -1))
        self.softcam_server.SetToolTip(_("hostname or ip of softcam server"))
        grid_sizer_2.Add(self.softcam_server, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        softcam_port_label = wx.StaticText(self.softcam_panel, wx.ID_ANY, _("Port"))
        grid_sizer_2.Add(softcam_port_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.softcam_port = DtIntCtrl(self.softcam_panel, wx.ID_ANY, _("1"))
        self.softcam_port.SetMinSize((250, -1))
        self.softcam_port.SetToolTip(_("Port of softcam server"))
        grid_sizer_2.Add(self.softcam_port, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        softcam_enabled_label = wx.StaticText(self.softcam_panel, wx.ID_ANY, _("Enabled"))
        grid_sizer_2.Add(softcam_enabled_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.softcam_enabled = wx.CheckBox(self.softcam_panel, wx.ID_ANY, "")
        grid_sizer_2.Add(self.softcam_enabled, 0, 0, 0)

        self.record_pane = wx.Panel(self.preferences_notebook, wx.ID_ANY)
        self.preferences_notebook.AddPage(self.record_pane, _("Record"))

        grid_sizer_3 = wx.FlexGridSizer(6, 2, 5, 5)

        label_9 = wx.StaticText(self.record_pane, wx.ID_ANY, _("Default record time"))
        grid_sizer_3.Add(label_9, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.default_record_time = DurationTextCtrl(self.record_pane, wx.ID_ANY, _("120"))
        self.default_record_time.SetMinSize((250, -1))
        self.default_record_time.SetToolTip(_("Duration of unscheduled recordings (use format 1h 3m 2s for 1 hours, 3 minutes and 1 second)"))
        grid_sizer_3.Add(self.default_record_time, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_10 = wx.StaticText(self.record_pane, wx.ID_ANY, _("Pre-record time"))
        grid_sizer_3.Add(label_10, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.pre_record_time = DurationTextCtrl(self.record_pane, wx.ID_ANY, _("1"))
        self.pre_record_time.SetMinSize((250, -1))
        self.pre_record_time.SetToolTip(_("Time to start recording before start of program (use format 1h 3m 2s for 1 hours, 3 minutes and 1 second)"))
        grid_sizer_3.Add(self.pre_record_time, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_11 = wx.StaticText(self.record_pane, wx.ID_ANY, _("Post-record time"))
        grid_sizer_3.Add(label_11, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.post_record_time = DurationTextCtrl(self.record_pane, wx.ID_ANY, _("5"))
        self.post_record_time.SetMinSize((250, -1))
        self.post_record_time.SetToolTip(_("Time to continue recording after end of program (use format 1h 3m 2s for 1 hours, 3 minutes and 1 second)"))
        grid_sizer_3.Add(self.post_record_time, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_11 = wx.StaticText(self.record_pane, wx.ID_ANY, _("Timeshift duration"))
        grid_sizer_3.Add(label_11, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.timeshift_duration = DurationTextCtrl(self.record_pane, wx.ID_ANY, _("120"))
        self.timeshift_duration.SetMinSize((250, -1))
        self.timeshift_duration.SetToolTip(_("Time for which to keep timeshift data (use format 1h 3m 2s for 1 hours, 3 minutes and 1 second)"))
        grid_sizer_3.Add(self.timeshift_duration, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        livebuffer_retention_time_label = wx.StaticText(self.record_pane, wx.ID_ANY, _("Timeshift buffer retention"))
        grid_sizer_3.Add(livebuffer_retention_time_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.livebuffer_retention_time = DurationTextCtrl(self.record_pane, wx.ID_ANY, _("5"))
        self.livebuffer_retention_time.SetMinSize((250, -1))
        self.livebuffer_retention_time.SetToolTip(_("Time for which to preserve livebuffers after tuning to another service (use format 1h 3m 2s for 1 hours, 3 minutes and 1 second)"))
        grid_sizer_3.Add(self.livebuffer_retention_time, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        livebuffer_mpm_part_duration_label = wx.StaticText(self.record_pane, wx.ID_ANY, _("Timeshift resolution"))
        grid_sizer_3.Add(livebuffer_mpm_part_duration_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.livebuffer_mpm_part_duration = DurationTextCtrl(self.record_pane, wx.ID_ANY, _("5"))
        self.livebuffer_mpm_part_duration.SetMinSize((250, -1))
        self.livebuffer_mpm_part_duration.SetToolTip(_("Timeshift resolution (use format 1h 3m 2s for 1 hours, 3 minutes and 1 second)"))
        grid_sizer_3.Add(self.livebuffer_mpm_part_duration, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.preferences_notebook_Tune = wx.Panel(self.preferences_notebook, wx.ID_ANY)
        self.preferences_notebook.AddPage(self.preferences_notebook_Tune, _("Tune"))

        grid_sizer_4 = wx.FlexGridSizer(4, 2, 5, 5)

        tune_use_blind_tune_label = wx.StaticText(self.preferences_notebook_Tune, wx.ID_ANY, _("Use blind tune"))
        grid_sizer_4.Add(tune_use_blind_tune_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.tune_use_blind_tune = wx.CheckBox(self.preferences_notebook_Tune, wx.ID_ANY, "")
        self.tune_use_blind_tune.SetToolTip(_("Use blind tune during regular tuning, and use database parameters only as a starting guess"))
        grid_sizer_4.Add(self.tune_use_blind_tune, 0, 0, 0)

        tune_may_move_dish_label = wx.StaticText(self.preferences_notebook_Tune, wx.ID_ANY, _("Allow moving dish"))
        grid_sizer_4.Add(tune_may_move_dish_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.tune_may_move_dish = wx.CheckBox(self.preferences_notebook_Tune, wx.ID_ANY, "")
        self.tune_may_move_dish.SetToolTip(_("Move the dish if that is required to tune a service or mux. If disabled, then tune will fail instead"))
        grid_sizer_4.Add(self.tune_may_move_dish, 0, 0, 0)

        dish_move_penalty_label = wx.StaticText(self.preferences_notebook_Tune, wx.ID_ANY, _("Dish move penalty"))
        dish_move_penalty_label.SetToolTip(_("Use blind tune on positioner dialog"))
        grid_sizer_4.Add(dish_move_penalty_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.dish_move_penalty = DtIntCtrl(self.preferences_notebook_Tune, wx.ID_ANY, _("1"))
        self.dish_move_penalty.SetMinSize((250, -1))
        self.dish_move_penalty.SetToolTip(_("When deciding which lnb to use, how much to penalize an LNB placed on a dish?"))
        grid_sizer_4.Add(self.dish_move_penalty, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        resource_reuse_bonus_label = wx.StaticText(self.preferences_notebook_Tune, wx.ID_ANY, _("Resource reuse bonus"))
        resource_reuse_bonus_label.SetToolTip(_("When deciding which LNB and frontend to use in tuning, how much to prefer sharing the LNB or frontend with a live subscription"))
        grid_sizer_4.Add(resource_reuse_bonus_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.resource_reuse_bonus = DtIntCtrl(self.preferences_notebook_Tune, wx.ID_ANY, _("1"))
        self.resource_reuse_bonus.SetMinSize((250, -1))
        self.resource_reuse_bonus.SetToolTip(_("When deciding which lnb to use, how much to penalize an LNB placed on a dish?"))
        grid_sizer_4.Add(self.resource_reuse_bonus, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.preferences_notebook_Scan = wx.Panel(self.preferences_notebook, wx.ID_ANY)
        self.preferences_notebook.AddPage(self.preferences_notebook_Scan, _("Scan"))

        grid_sizer_5 = wx.FlexGridSizer(4, 2, 5, 5)

        scan_use_blind_tune_label = wx.StaticText(self.preferences_notebook_Scan, wx.ID_ANY, _("Use blind tune"))
        grid_sizer_5.Add(scan_use_blind_tune_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.scan_use_blind_tune = wx.CheckBox(self.preferences_notebook_Scan, wx.ID_ANY, "")
        self.scan_use_blind_tune.SetToolTip(_("Use blind tune during user requested scanning, and use database parameters only as a starting guess"))
        grid_sizer_5.Add(self.scan_use_blind_tune, 0, 0, 0)

        scan_may_move_dish_label = wx.StaticText(self.preferences_notebook_Scan, wx.ID_ANY, _("Alllow moving dish"))
        grid_sizer_5.Add(scan_may_move_dish_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.scan_may_move_dish = wx.CheckBox(self.preferences_notebook_Scan, wx.ID_ANY, "")
        self.scan_may_move_dish.SetToolTip(_("Move the dish if that is required to scan a service or mux. If disabled, then scanning that mux will fail instead."))
        grid_sizer_5.Add(self.scan_may_move_dish, 0, 0, 0)

        band_scan_save_spectrum_label = wx.StaticText(self.preferences_notebook_Scan, wx.ID_ANY, _("Save spectra"))
        grid_sizer_5.Add(band_scan_save_spectrum_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.band_scan_save_spectrum = wx.CheckBox(self.preferences_notebook_Scan, wx.ID_ANY, "")
        self.band_scan_save_spectrum.SetToolTip(_("During satellite band scanning, save the spectra. When disabled, spectra are not saved"))
        grid_sizer_5.Add(self.band_scan_save_spectrum, 0, 0, 0)

        scan_max_duration_label = wx.StaticText(self.preferences_notebook_Scan, wx.ID_ANY, _("Maximum time spent on epg scan"))
        grid_sizer_5.Add(scan_max_duration_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.scan_max_duration = DurationTextCtrl(self.preferences_notebook_Scan, wx.ID_ANY, _("1"))
        self.scan_max_duration.SetMinSize((250, -1))
        self.scan_max_duration.SetToolTip(_("Time to start recording before start of program (use format 1h 3m 2s for 1 hours, 3 minutes and 1 second)"))
        grid_sizer_5.Add(self.scan_max_duration, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.preferences_notebook_Positioner = wx.Panel(self.preferences_notebook, wx.ID_ANY)
        self.preferences_notebook.AddPage(self.preferences_notebook_Positioner, _("Positioner"))

        grid_sizer_6 = wx.FlexGridSizer(1, 2, 5, 5)

        positioner_dialog_use_blind_tune_label = wx.StaticText(self.preferences_notebook_Positioner, wx.ID_ANY, _("Use blind tune"))
        grid_sizer_6.Add(positioner_dialog_use_blind_tune_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.positioner_dialog_use_blind_tune = wx.CheckBox(self.preferences_notebook_Positioner, wx.ID_ANY, "")
        self.positioner_dialog_use_blind_tune.SetToolTip(_("Use blind tune on positioner dialog"))
        grid_sizer_6.Add(self.positioner_dialog_use_blind_tune, 0, 0, 0)

        sizer_2 = wx.StdDialogButtonSizer()
        sizer_1.Add(sizer_2, 0, wx.ALIGN_RIGHT | wx.ALL, 4)

        self.button_save = wx.Button(self, wx.ID_SAVE, "")
        self.button_save.SetDefault()
        sizer_2.AddButton(self.button_save)

        self.button_CANCEL = wx.Button(self, wx.ID_CANCEL, "")
        sizer_2.AddButton(self.button_CANCEL)

        sizer_2.Realize()

        self.preferences_notebook_Positioner.SetSizer(grid_sizer_6)

        self.preferences_notebook_Scan.SetSizer(grid_sizer_5)

        self.preferences_notebook_Tune.SetSizer(grid_sizer_4)

        self.record_pane.SetSizer(grid_sizer_3)

        self.softcam_panel.SetSizer(grid_sizer_2)

        grid_sizer_1.AddGrowableCol(1)

        self.storage_pane.SetSizer(sizer_5)

        self.SetSizer(sizer_1)

        self.SetAffirmativeId(self.button_save.GetId())
        self.SetEscapeId(self.button_CANCEL.GetId())

        self.Layout()

        self.Bind(wx.EVT_BUTTON, self.OnSave, self.button_save)
        # end wxGlade

    def OnSave(self, event):  # wxGlade: PreferencesDialog_.<event_handler>
        print("Event handler 'OnSave' not implemented!")
        event.Skip()

# end of class PreferencesDialog_

class MyApp(wx.App):
    def OnInit(self):
        self.preferences_dialog = PreferencesDialog_(None, wx.ID_ANY, "")
        self.SetTopWindow(self.preferences_dialog)
        self.preferences_dialog.ShowModal()
        self.preferences_dialog.Destroy()
        return True

# end of class MyApp

if __name__ == "__main__":
    gettext.install("preferences_dialog") # replace with the appropriate catalog name

    preferences_dialog = MyApp(0)
    preferences_dialog.MainLoop()
