#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.1.0pre on Tue Nov 21 22:49:08 2023
#

import wx

# begin wxGlade: dependencies
import gettext
import wx.adv
# end wxGlade

# begin wxGlade: extracode
from neumodvb.neumowidgets import DurationTextCtrl
from neumodvb.neumowidgets import TimeTextCtrl
from neumodvb.neumowidgets import DatePickerCtrl
from neumodvb.servicelist_combo import ServiceListComboCtrl
from neumodvb.neumowidgets import CardsCheckListBox
from neumodvb.neumowidgets import DishesCheckListBox
from neumodvb.neumowidgets import PolarisationsCheckListBox
from neumodvb.neumowidgets import SatBandsCheckListBox
# end wxGlade


class ChannelNoDialog_(wx.Dialog):
				def __init__(self, *args, **kwds):
								# begin wxGlade: ChannelNoDialog_.__init__
								kwds["style"] = kwds.get("style", 0) | wx.MINIMIZE_BOX | wx.STAY_ON_TOP
								wx.Dialog.__init__(self, *args, **kwds)
								self.SetTitle(_("Neumo"))
								self.SetBackgroundColour(wx.Colour(0, 0, 0))
								self.SetForegroundColour(wx.Colour(255, 255, 0))
								self.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))

								sizer_6 = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, _("Channel number")), wx.HORIZONTAL)

								sizer_6.Add((0, 0), 0, 0, 0)

								self.chno = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_MULTILINE | wx.TE_PROCESS_ENTER)
								self.chno.SetBackgroundColour(wx.Colour(0, 0, 0))
								self.chno.SetForegroundColour(wx.Colour(255, 255, 0))
								sizer_6.Add(self.chno, 2, 0, 0)

								self.SetSizer(sizer_6)
								sizer_6.Fit(self)

								self.Layout()

								self.chno.Bind(wx.EVT_TEXT, self.OnText)
								self.chno.Bind(wx.EVT_TEXT_ENTER, self.OnTextEnter)
								# end wxGlade

				def OnText(self, event):  # wxGlade: ChannelNoDialog_.<event_handler>
								print("Event handler 'OnText' not implemented!")
								event.Skip()

				def OnTextEnter(self, event):  # wxGlade: ChannelNoDialog_.<event_handler>
								print("Event handler 'OnTextEnter' not implemented!")
								event.Skip()

# end of class ChannelNoDialog_

class LnbNetworkDialog_(wx.Dialog):
				def __init__(self, *args, **kwds):
								# begin wxGlade: LnbNetworkDialog_.__init__
								kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE | wx.MAXIMIZE_BOX | wx.MINIMIZE_BOX | wx.RESIZE_BORDER | wx.STAY_ON_TOP
								wx.Dialog.__init__(self, *args, **kwds)
								self.SetSize((1200, 400))
								self.SetTitle(_("Networks"))

								sizer_1 = wx.BoxSizer(wx.VERTICAL)

								self.lnbnetworklist_panel = wx.Panel(self, wx.ID_ANY, style=wx.BORDER_RAISED | wx.CLIP_CHILDREN)
								sizer_1.Add(self.lnbnetworklist_panel, 1, wx.ALL | wx.EXPAND | wx.FIXED_MINSIZE, 0)

								self.lnbnetworkgrid_sizer = wx.BoxSizer(wx.VERTICAL)

								self.lnbnetworkgrid_sizer.Add((0, 0), 0, 0, 0)

								sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
								sizer_1.Add(sizer_2, 0, wx.ALIGN_RIGHT | wx.FIXED_MINSIZE, 0)

								self.New = wx.Button(self, wx.ID_ANY, _("New"))
								sizer_2.Add(self.New, 1, 0, 0)

								self.Delete = wx.Button(self, wx.ID_ANY, _("Delete"))
								sizer_2.Add(self.Delete, 1, 0, 0)

								self.Cancel = wx.Button(self, wx.ID_CANCEL, _("Cancel"))
								sizer_2.Add(self.Cancel, 0, wx.ALL, 1)

								self.Done = wx.Button(self, wx.ID_OK, _("Done"))
								sizer_2.Add(self.Done, 0, wx.ALL, 1)

								self.lnbnetworklist_panel.SetSizer(self.lnbnetworkgrid_sizer)

								self.SetSizer(sizer_1)

								self.Layout()

								self.New.Bind(wx.EVT_BUTTON, self.OnNew)
								self.Delete.Bind(wx.EVT_BUTTON, self.OnDelete)
								self.Cancel.Bind(wx.EVT_BUTTON, self.OnCancel)
								self.Done.Bind(wx.EVT_BUTTON, self.OnDone)
								# end wxGlade

				def OnNew(self, event):  # wxGlade: LnbNetworkDialog_.<event_handler>
								print("Event handler 'OnNew' not implemented!")
								event.Skip()

				def OnDelete(self, event):  # wxGlade: LnbNetworkDialog_.<event_handler>
								print("Event handler 'OnDelete' not implemented!")
								event.Skip()

				def OnCancel(self, event):  # wxGlade: LnbNetworkDialog_.<event_handler>
								print("Event handler 'OnCancel' not implemented!")
								event.Skip()

				def OnDone(self, event):  # wxGlade: LnbNetworkDialog_.<event_handler>
								print("Event handler 'OnDone' not implemented!")
								event.Skip()

# end of class LnbNetworkDialog_

class LnbConnectionDialog_(wx.Dialog):
				def __init__(self, *args, **kwds):
								# begin wxGlade: LnbConnectionDialog_.__init__
								kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE | wx.MAXIMIZE_BOX | wx.MINIMIZE_BOX | wx.RESIZE_BORDER | wx.STAY_ON_TOP
								wx.Dialog.__init__(self, *args, **kwds)
								self.SetSize((1200, 400))
								self.SetTitle(_("Connections"))

								sizer_11 = wx.BoxSizer(wx.VERTICAL)

								self.lnbconnectionlist_panel = wx.Panel(self, wx.ID_ANY, style=wx.BORDER_RAISED | wx.CLIP_CHILDREN)
								sizer_11.Add(self.lnbconnectionlist_panel, 1, wx.ALL | wx.EXPAND | wx.FIXED_MINSIZE, 0)

								self.lnbconnectiongrid_sizer = wx.BoxSizer(wx.VERTICAL)

								self.lnbconnectiongrid_sizer.Add((0, 0), 0, 0, 0)

								sizer_21 = wx.BoxSizer(wx.HORIZONTAL)
								sizer_11.Add(sizer_21, 0, wx.ALIGN_RIGHT | wx.FIXED_MINSIZE, 0)

								self.New = wx.Button(self, wx.ID_ANY, _("New"))
								sizer_21.Add(self.New, 1, 0, 0)

								self.Delete = wx.Button(self, wx.ID_ANY, _("Delete"))
								sizer_21.Add(self.Delete, 1, 0, 0)

								self.Cancel = wx.Button(self, wx.ID_CANCEL, _("Cancel"))
								sizer_21.Add(self.Cancel, 0, wx.ALL, 1)

								self.Done = wx.Button(self, wx.ID_OK, _("Done"))
								sizer_21.Add(self.Done, 0, wx.ALL, 1)

								self.lnbconnectionlist_panel.SetSizer(self.lnbconnectiongrid_sizer)

								self.SetSizer(sizer_11)

								self.Layout()

								self.New.Bind(wx.EVT_BUTTON, self.OnNew)
								self.Delete.Bind(wx.EVT_BUTTON, self.OnDelete)
								self.Cancel.Bind(wx.EVT_BUTTON, self.OnCancel)
								self.Done.Bind(wx.EVT_BUTTON, self.OnDone)
								# end wxGlade

				def OnNew(self, event):  # wxGlade: LnbConnectionDialog_.<event_handler>
								print("Event handler 'OnNew' not implemented!")
								event.Skip()

				def OnDelete(self, event):  # wxGlade: LnbConnectionDialog_.<event_handler>
								print("Event handler 'OnDelete' not implemented!")
								event.Skip()

				def OnCancel(self, event):  # wxGlade: LnbConnectionDialog_.<event_handler>
								print("Event handler 'OnCancel' not implemented!")
								event.Skip()

				def OnDone(self, event):  # wxGlade: LnbConnectionDialog_.<event_handler>
								print("Event handler 'OnDone' not implemented!")
								event.Skip()

# end of class LnbConnectionDialog_

class ErrorDialog_(wx.Dialog):
				def __init__(self, *args, **kwds):
								# begin wxGlade: ErrorDialog_.__init__
								kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
								wx.Dialog.__init__(self, *args, **kwds)
								self.SetSize((800, 300))
								self.SetTitle(_("dialog_2"))

								sizer_3 = wx.BoxSizer(wx.VERTICAL)

								self.title = wx.StaticText(self, wx.ID_ANY, _("The title"), style=wx.ALIGN_CENTER_HORIZONTAL)
								self.title.SetFont(wx.Font(14, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
								sizer_3.Add(self.title, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 10)

								static_line_1 = wx.StaticLine(self, wx.ID_ANY)
								sizer_3.Add(static_line_1, 0, wx.EXPAND, 0)

								sizer_3.Add((20, 20), 0, 0, 0)

								self.message = wx.StaticText(self, wx.ID_ANY, _("This is a message This is a message This is a message This is a message This is a message This is a message This is a message This is a message This is a message This is a message This is a message This is a message This is a message "))
								self.message.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Sans"))
								sizer_3.Add(self.message, 2, wx.EXPAND | wx.FIXED_MINSIZE, 0)

								sizer_4 = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, ""), wx.HORIZONTAL)
								sizer_3.Add(sizer_4, 0, wx.ALIGN_RIGHT | wx.FIXED_MINSIZE, 0)

								self.cancel = wx.Button(self, wx.ID_ANY, _("Cancel"))
								sizer_4.Add(self.cancel, 1, 0, 0)

								self.ok = wx.Button(self, wx.ID_ANY, _("OK"))
								sizer_4.Add(self.ok, 1, 0, 0)

								self.SetSizer(sizer_3)

								self.Layout()

								self.cancel.Bind(wx.EVT_BUTTON, lambda evt: self.EndModal(wx.ID_CANCEL))
								self.ok.Bind(wx.EVT_BUTTON, lambda evt: self.EndModal(wx.ID_OK))
								# end wxGlade

# end of class ErrorDialog_

class LanguageDialog_(wx.Dialog):
				def __init__(self, *args, **kwds):
								# begin wxGlade: LanguageDialog_.__init__
								kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE | wx.MAXIMIZE_BOX | wx.MINIMIZE_BOX | wx.RESIZE_BORDER | wx.STAY_ON_TOP
								wx.Dialog.__init__(self, *args, **kwds)
								self.SetSize((600, 400))
								self.SetTitle(_("Select Language"))

								sizer_1 = wx.BoxSizer(wx.VERTICAL)

								self.title = wx.StaticText(self, wx.ID_ANY, _("The title"), style=wx.ALIGN_CENTER_HORIZONTAL)
								self.title.SetFont(wx.Font(14, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
								sizer_1.Add(self.title, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 10)

								static_line_1 = wx.StaticLine(self, wx.ID_ANY)
								sizer_1.Add(static_line_1, 0, wx.EXPAND, 0)

								self.languagelist_panel = wx.Panel(self, wx.ID_ANY, style=wx.BORDER_RAISED | wx.CLIP_CHILDREN)
								sizer_1.Add(self.languagelist_panel, 1, wx.ALL | wx.EXPAND | wx.FIXED_MINSIZE, 0)

								self.languagegrid_sizer = wx.BoxSizer(wx.VERTICAL)

								self.languagegrid_sizer.Add((0, 0), 0, 0, 0)

								sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
								sizer_1.Add(sizer_2, 0, wx.ALIGN_RIGHT | wx.FIXED_MINSIZE, 0)

								self.Done = wx.Button(self, wx.ID_OK, _("Done"))
								sizer_2.Add(self.Done, 0, wx.ALL, 1)

								self.languagelist_panel.SetSizer(self.languagegrid_sizer)

								self.SetSizer(sizer_1)

								self.Layout()

								self.Done.Bind(wx.EVT_BUTTON, self.OnDone)
								# end wxGlade

				def OnDone(self, event):  # wxGlade: LanguageDialog_.<event_handler>
								print("Event handler 'OnDone' not implemented!")
								event.Skip()

# end of class LanguageDialog_

class RecordDialog_(wx.Dialog):
				def __init__(self, *args, **kwds):
								# begin wxGlade: RecordDialog_.__init__
								kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE | wx.MINIMIZE_BOX | wx.RESIZE_BORDER | wx.STAY_ON_TOP
								wx.Dialog.__init__(self, *args, **kwds)
								self.SetSize((400, -1))
								self.SetTitle(_("Neumo Recording"))

								sizer_1 = wx.FlexGridSizer(1, 1, 20, 20)

								self.panel_1 = wx.Panel(self, wx.ID_ANY, style=wx.BORDER_SUNKEN)
								sizer_1.Add(self.panel_1, 1, wx.ALL | wx.EXPAND, 5)

								sizer_2 = wx.BoxSizer(wx.VERTICAL)

								self.title_label = wx.StaticText(self.panel_1, wx.ID_ANY, _("New recording"))
								self.title_label.SetFont(wx.Font(8, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
								sizer_2.Add(self.title_label, 0, wx.BOTTOM, 5)

								grid_sizer_2 = wx.FlexGridSizer(3, 2, 5, 5)
								sizer_2.Add(grid_sizer_2, 1, wx.EXPAND, 0)

								label_3 = wx.StaticText(self.panel_1, wx.ID_ANY, _("Event:"))
								grid_sizer_2.Add(label_3, 0, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND | wx.FIXED_MINSIZE, 0)

								self.event_name_text = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_LEFT)
								grid_sizer_2.Add(self.event_name_text, 1, wx.EXPAND, 0)

								label_4 = wx.StaticText(self.panel_1, wx.ID_ANY, _("Service:"))
								grid_sizer_2.Add(label_4, 0, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND | wx.FIXED_MINSIZE, 0)

								self.service_name_text = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_READONLY)
								grid_sizer_2.Add(self.service_name_text, 1, wx.EXPAND, 0)

								label_5 = wx.StaticText(self.panel_1, wx.ID_ANY, _("Start:"))
								grid_sizer_2.Add(label_5, 0, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)

								grid_sizer_3 = wx.FlexGridSizer(1, 4, 0, 5)
								grid_sizer_2.Add(grid_sizer_3, 1, wx.FIXED_MINSIZE, 0)

								self.startdate_datepicker = DatePickerCtrl(self.panel_1, wx.ID_ANY)
								grid_sizer_3.Add(self.startdate_datepicker, 1, wx.ALIGN_CENTER_VERTICAL, 0)

								self.starttime_text = TimeTextCtrl(self.panel_1, wx.ID_ANY, "")
								grid_sizer_3.Add(self.starttime_text, 0, wx.ALIGN_CENTER_VERTICAL, 0)

								label_6 = wx.StaticText(self.panel_1, wx.ID_ANY, _("Duration:"))
								grid_sizer_3.Add(label_6, 0, wx.ALIGN_CENTER_VERTICAL, 0)

								self.duration_text = DurationTextCtrl(self.panel_1, wx.ID_ANY, "")
								grid_sizer_3.Add(self.duration_text, 0, wx.ALIGN_CENTER_VERTICAL, 0)

								sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
								sizer_2.Add(sizer_4, 0, wx.ALIGN_RIGHT | wx.FIXED_MINSIZE | wx.TOP, 20)

								self.cancel = wx.Button(self.panel_1, wx.ID_ANY, _("Cancel"))
								sizer_4.Add(self.cancel, 1, 0, 0)

								self.ok = wx.Button(self.panel_1, wx.ID_ANY, _("OK"))
								self.ok.SetFocus()
								sizer_4.Add(self.ok, 1, 0, 0)

								grid_sizer_3.AddGrowableCol(0)
								grid_sizer_3.AddGrowableCol(1)

								grid_sizer_2.AddGrowableRow(0)
								grid_sizer_2.AddGrowableCol(0)
								grid_sizer_2.AddGrowableCol(1)

								self.panel_1.SetSizer(sizer_2)

								sizer_1.AddGrowableCol(0)
								self.SetSizer(sizer_1)

								self.Layout()

								self.cancel.Bind(wx.EVT_BUTTON, lambda evt: self.EndModal(wx.ID_CANCEL))
								self.ok.Bind(wx.EVT_BUTTON, lambda evt: self.EndModal(wx.ID_OK))
								# end wxGlade

# end of class RecordDialog_

class FilterDialog_(wx.Dialog):
				def __init__(self, *args, **kwds):
								# begin wxGlade: FilterDialog_.__init__
								kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE | wx.MAXIMIZE_BOX | wx.MINIMIZE_BOX | wx.RESIZE_BORDER | wx.STAY_ON_TOP
								wx.Dialog.__init__(self, *args, **kwds)
								self.SetSize((1200, 200))
								self.SetTitle(_("FIlter columns"))

								sizer_1 = wx.BoxSizer(wx.VERTICAL)

								self.filter_panel = wx.Panel(self, wx.ID_ANY, style=wx.BORDER_RAISED | wx.CLIP_CHILDREN)
								sizer_1.Add(self.filter_panel, 1, wx.ALL | wx.EXPAND | wx.FIXED_MINSIZE, 0)

								self.grid_sizer = wx.BoxSizer(wx.VERTICAL)

								self.grid_sizer.Add((0, 0), 0, 0, 0)

								sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
								sizer_1.Add(sizer_2, 0, wx.ALIGN_RIGHT | wx.FIXED_MINSIZE, 0)

								self.RemoveAll = wx.Button(self, True, _("Remove All"))
								sizer_2.Add(self.RemoveAll, 1, 0, 0)

								self.Remove = wx.Button(self, False, _("Remove Column"))
								sizer_2.Add(self.Remove, 1, 0, 0)

								self.Cancel = wx.Button(self, wx.ID_CANCEL, _("Cancel"))
								sizer_2.Add(self.Cancel, 0, wx.ALL, 1)

								self.Done = wx.Button(self, wx.ID_OK, _("OK"))
								sizer_2.Add(self.Done, 0, wx.ALL, 1)

								self.filter_panel.SetSizer(self.grid_sizer)

								self.SetSizer(sizer_1)

								self.Layout()

								self.RemoveAll.Bind(wx.EVT_BUTTON, self.OnDelete)
								self.Remove.Bind(wx.EVT_BUTTON, self.OnDelete)
								self.Cancel.Bind(wx.EVT_BUTTON, self.OnCancel)
								self.Done.Bind(wx.EVT_BUTTON, self.OnDone)
								# end wxGlade

				def OnDelete(self, event):  # wxGlade: FilterDialog_.<event_handler>
								print("Event handler 'OnDelete' not implemented!")
								event.Skip()

				def OnCancel(self, event):  # wxGlade: FilterDialog_.<event_handler>
								print("Event handler 'OnCancel' not implemented!")
								event.Skip()

				def OnDone(self, event):  # wxGlade: FilterDialog_.<event_handler>
								print("Event handler 'OnDone' not implemented!")
								event.Skip()

# end of class FilterDialog_

class AutoRecDialog_(wx.Dialog):
				def __init__(self, *args, **kwds):
								# begin wxGlade: AutoRecDialog_.__init__
								kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE | wx.MINIMIZE_BOX | wx.RESIZE_BORDER | wx.STAY_ON_TOP
								wx.Dialog.__init__(self, *args, **kwds)
								self.SetSize((732, -1))
								self.SetTitle(_("Neumo Auto Rec"))

								sizer_1 = wx.FlexGridSizer(1, 1, 20, 20)

								self.panel_1 = wx.Panel(self, wx.ID_ANY, style=wx.BORDER_SUNKEN)
								sizer_1.Add(self.panel_1, 1, wx.ALL | wx.EXPAND, 5)

								sizer_2 = wx.FlexGridSizer(3, 1, 0, 0)

								self.title_label = wx.StaticText(self.panel_1, wx.ID_ANY, _("New Auto Rec"))
								self.title_label.SetFont(wx.Font(8, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
								sizer_2.Add(self.title_label, 0, wx.BOTTOM, 5)

								grid_sizer_2 = wx.GridSizer(5, 2, 5, 5)
								sizer_2.Add(grid_sizer_2, 1, wx.ALL | wx.EXPAND, 0)

								label_4 = wx.StaticText(self.panel_1, wx.ID_ANY, _("Service:"))
								grid_sizer_2.Add(label_4, 0, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND | wx.FIXED_MINSIZE, 0)

								self.autorec_service_sel = ServiceListComboCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_DONTWRAP | wx.TE_LEFT | wx.TE_MULTILINE | wx.TE_READONLY | wx.TE_RICH)
								grid_sizer_2.Add(self.autorec_service_sel, 0, wx.EXPAND | wx.LEFT | wx.RIGHT, 5)

								label_3 = wx.StaticText(self.panel_1, wx.ID_ANY, _("Event name contains:"))
								grid_sizer_2.Add(label_3, 0, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND | wx.FIXED_MINSIZE, 0)

								self.event_name_contains_text = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_LEFT)
								self.event_name_contains_text.SetMinSize((200, -1))
								grid_sizer_2.Add(self.event_name_contains_text, 1, wx.ALL | wx.EXPAND, 5)

								label_7 = wx.StaticText(self.panel_1, wx.ID_ANY, _("Story contains:"))
								grid_sizer_2.Add(label_7, 0, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND | wx.FIXED_MINSIZE, 0)

								self.story_contains_text = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_LEFT)
								grid_sizer_2.Add(self.story_contains_text, 1, wx.ALL | wx.EXPAND, 5)

								label_5 = wx.StaticText(self.panel_1, wx.ID_ANY, _("Starts between:"))
								grid_sizer_2.Add(label_5, 0, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)

								grid_sizer_3 = wx.FlexGridSizer(1, 3, 0, 5)
								grid_sizer_2.Add(grid_sizer_3, 1, wx.FIXED_MINSIZE, 0)

								self.starts_after_text = TimeTextCtrl(self.panel_1, wx.ID_ANY, "")
								grid_sizer_3.Add(self.starts_after_text, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)

								label_1 = wx.StaticText(self.panel_1, wx.ID_ANY, _("and"))
								grid_sizer_3.Add(label_1, 0, wx.ALIGN_CENTER, 0)

								self.starts_before_text = TimeTextCtrl(self.panel_1, wx.ID_ANY, "")
								grid_sizer_3.Add(self.starts_before_text, 0, wx.ALIGN_CENTER_VERTICAL, 0)

								label_6 = wx.StaticText(self.panel_1, wx.ID_ANY, _("Duration between:"))
								grid_sizer_2.Add(label_6, 0, wx.ALIGN_CENTER_VERTICAL, 0)

								grid_sizer_4 = wx.FlexGridSizer(1, 3, 0, 5)
								grid_sizer_2.Add(grid_sizer_4, 1, wx.FIXED_MINSIZE, 0)

								self.min_duration_text = DurationTextCtrl(self.panel_1, wx.ID_ANY, "")
								grid_sizer_4.Add(self.min_duration_text, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)

								label_2 = wx.StaticText(self.panel_1, wx.ID_ANY, _("and"))
								grid_sizer_4.Add(label_2, 0, wx.ALIGN_CENTER, 0)

								self.max_duration_text = DurationTextCtrl(self.panel_1, wx.ID_ANY, "")
								grid_sizer_4.Add(self.max_duration_text, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)

								sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
								sizer_2.Add(sizer_4, 0, wx.ALIGN_RIGHT | wx.FIXED_MINSIZE, 20)

								self.cancel = wx.Button(self.panel_1, wx.ID_ANY, _("Cancel"))
								sizer_4.Add(self.cancel, 1, wx.ALL, 5)

								self.delete = wx.Button(self.panel_1, wx.ID_DELETE, "")
								sizer_4.Add(self.delete, 1, wx.ALL, 5)

								self.ok = wx.Button(self.panel_1, wx.ID_ANY, _("OK"))
								self.ok.SetFocus()
								sizer_4.Add(self.ok, 1, wx.ALL, 5)

								grid_sizer_4.AddGrowableCol(0)
								grid_sizer_4.AddGrowableCol(2)

								grid_sizer_3.AddGrowableCol(0)
								grid_sizer_3.AddGrowableCol(2)

								self.panel_1.SetSizer(sizer_2)

								sizer_1.AddGrowableCol(0)
								self.SetSizer(sizer_1)

								self.Layout()

								self.cancel.Bind(wx.EVT_BUTTON, lambda evt: self.EndModal(wx.ID_CANCEL))
								self.delete.Bind(wx.EVT_BUTTON, lambda evt: self.EndModal(wx.ID_DELETE))
								self.ok.Bind(wx.EVT_BUTTON, lambda evt: self.EndModal(wx.ID_OK))
								# end wxGlade

# end of class AutoRecDialog_

class ScanDialog_(wx.Dialog):
				def __init__(self, *args, **kwds):
								# begin wxGlade: ScanDialog_.__init__
								kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE | wx.RESIZE_BORDER
								wx.Dialog.__init__(self, *args, **kwds)
								self.SetTitle(_("dialog_7"))

								self.main_sizer = wx.BoxSizer(wx.VERTICAL)

								self.panel_1 = wx.Panel(self, wx.ID_ANY)
								self.main_sizer.Add(self.panel_1, 1, wx.EXPAND, 0)

								sizer_3 = wx.FlexGridSizer(11, 1, 0, 0)

								self.title_label = wx.StaticText(self.panel_1, wx.ID_ANY, _("Scan Parameters"))
								self.title_label.SetFont(wx.Font(8, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
								sizer_3.Add(self.title_label, 0, wx.BOTTOM, 5)

								self.scan_type_choice = wx.Choice(self.panel_1, wx.ID_ANY, choices=[_("Scan spectrum"), _("Scan Muxes")])
								self.scan_type_choice.SetSelection(1)
								sizer_3.Add(self.scan_type_choice, 0, wx.BOTTOM, 4)

								self.scan_epg_checkbox = wx.CheckBox(self.panel_1, wx.ID_ANY, _("Scan EPG"))
								self.scan_epg_checkbox.SetToolTip(_("Scan EPG program data (takes longer)"))
								sizer_3.Add(self.scan_epg_checkbox, 0, 0, 0)

								self.propagate_scan_checkbox = wx.CheckBox(self.panel_1, wx.ID_ANY, _("Propagate scan"))
								self.propagate_scan_checkbox.SetToolTip(_("When new muxes are discovered, \nscan them as well"))
								self.propagate_scan_checkbox.SetValue(1)
								sizer_3.Add(self.propagate_scan_checkbox, 0, 0, 0)

								self.blind_tune_checkbox = wx.CheckBox(self.panel_1, wx.ID_ANY, _("Use blind tune"))
								self.blind_tune_checkbox.SetToolTip(_("Do not trust tuning parameters, and use frequency as symbol rates as initial guess only"))
								self.blind_tune_checkbox.SetValue(1)
								sizer_3.Add(self.blind_tune_checkbox, 0, 0, 0)

								self.may_move_dish_checkbox = wx.CheckBox(self.panel_1, wx.ID_ANY, _("Allow moving dish"))
								self.may_move_dish_checkbox.SetToolTip(_("Allow moving satellite dish if it is not pointing at the correct satellite"))
								sizer_3.Add(self.may_move_dish_checkbox, 0, 0, 0)

								self.band_scan_save_spectrum_checkbox = wx.CheckBox(self.panel_1, wx.ID_ANY, _("Save spectra"))
								self.band_scan_save_spectrum_checkbox.SetToolTip(_("Save spectra acquired during scan (fills disk)"))
								sizer_3.Add(self.band_scan_save_spectrum_checkbox, 0, 0, 0)

								sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
								sizer_3.Add(sizer_5, 1, wx.EXPAND, 0)

								self.allowed_sat_bands_checklistbox = SatBandsCheckListBox(self.panel_1, wx.ID_ANY, choices=[])
								sizer_5.Add(self.allowed_sat_bands_checklistbox, 0, 0, 0)

								static_line_3 = wx.StaticLine(self.panel_1, wx.ID_ANY, style=wx.LI_VERTICAL)
								sizer_5.Add(static_line_3, 0, wx.ALL | wx.EXPAND | wx.FIXED_MINSIZE, 5)

								self.allowed_pols_checklistbox = PolarisationsCheckListBox(self.panel_1, wx.ID_ANY, choices=[])
								sizer_5.Add(self.allowed_pols_checklistbox, 0, 0, 0)

								static_line_1 = wx.StaticLine(self.panel_1, wx.ID_ANY)
								sizer_3.Add(static_line_1, 0, wx.ALL | wx.EXPAND | wx.FIXED_MINSIZE, 5)

								sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
								sizer_3.Add(sizer_4, 1, wx.EXPAND, 0)

								self.allowed_dishes_checklistbox = DishesCheckListBox(self.panel_1, wx.ID_ANY, choices=[], style=wx.LB_MULTIPLE | wx.LB_NEEDED_SB)
								self.allowed_dishes_checklistbox.SetFont(wx.Font(5, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Sans"))
								sizer_4.Add(self.allowed_dishes_checklistbox, 0, 0, 0)

								static_line_2 = wx.StaticLine(self.panel_1, wx.ID_ANY, style=wx.LI_VERTICAL)
								sizer_4.Add(static_line_2, 0, wx.ALL | wx.EXPAND | wx.FIXED_MINSIZE, 5)

								self.allowed_cards_checklistbox = CardsCheckListBox(self.panel_1, wx.ID_ANY, choices=[], style=wx.LB_MULTIPLE | wx.LB_NEEDED_SB)
								self.allowed_cards_checklistbox.SetFont(wx.Font(5, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Sans"))
								sizer_4.Add(self.allowed_cards_checklistbox, 0, 0, 0)

								sizer_3.Add((0, 0), 0, 0, 0)

								sizer_2 = wx.StdDialogButtonSizer()
								self.main_sizer.Add(sizer_2, 0, wx.ALIGN_RIGHT | wx.ALL, 4)

								self.button_OK = wx.Button(self, wx.ID_OK, "")
								self.button_OK.SetDefault()
								sizer_2.AddButton(self.button_OK)

								self.button_CANCEL = wx.Button(self, wx.ID_CANCEL, "")
								sizer_2.AddButton(self.button_CANCEL)

								sizer_2.Realize()

								sizer_3.AddGrowableRow(8)
								self.panel_1.SetSizer(sizer_3)

								self.SetSizer(self.main_sizer)
								self.main_sizer.Fit(self)

								self.SetAffirmativeId(self.button_OK.GetId())
								self.SetEscapeId(self.button_CANCEL.GetId())

								self.Layout()

								self.scan_type_choice.Bind(wx.EVT_CHOICE, self.OnScanTypeChoice)
								# end wxGlade

				def OnScanTypeChoice(self, event):  # wxGlade: ScanDialog_.<event_handler>
								print("Event handler 'OnScanTypeChoice' not implemented!")
								event.Skip()

# end of class ScanDialog_

class NeumoDialogs(wx.App):
				def OnInit(self):
								self.record_dialog = RecordDialog_(None, wx.ID_ANY, "")
								self.SetTopWindow(self.record_dialog)
								self.record_dialog.ShowModal()
								self.record_dialog.Destroy()
								return True

# end of class NeumoDialogs

if __name__ == "__main__":
				gettext.install("neumo_dialogs") # replace with the appropriate catalog name

				neumo_dialogs = NeumoDialogs(0)
				neumo_dialogs.MainLoop()
