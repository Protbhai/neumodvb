#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.1.0pre on Fri Aug 13 17:57:30 2021
#

import wx

# begin wxGlade: dependencies
import gettext
# end wxGlade

# begin wxGlade: extracode
from neumodvb.neumoplot import SpectrumPlot
from neumodvb import positioner_dialog
from neumodvb.neumoplot import ConstellationPlot
from neumodvb import spectrum_dialog
from neumodvb.positioner_muxgrid import PositionerDvbsMuxGrid
from neumodvb.muxlist_combo import DvbsMuxListComboCtrl
from neumodvb.spectrumlist import SpectrumSelectionGrid
# end wxGlade


class Panel(wx.Panel):
    def __init__(self, *args, **kwds):
        # begin wxGlade: wx.Panel.__init__
        kwds["style"] = kwds.get("style", 0)
        wx.Panel.__init__(self, *args, **kwds)
        self.Layout()
        # end wxGlade

# end of class wx.Panel

class SignalPanel_(wx.Panel):
    def __init__(self, *args, **kwds):
        # begin wxGlade: SignalPanel_.__init__
        kwds["style"] = kwds.get("style", 0) | wx.BORDER_SUNKEN
        wx.Panel.__init__(self, *args, **kwds)
        self.Layout()
        # end wxGlade

# end of class SignalPanel_

class Panel(wx.Panel):
    def __init__(self, *args, **kwds):
        # begin wxGlade: wx.Panel.__init__
        kwds["style"] = kwds.get("style", 0)
        wx.Panel.__init__(self, *args, **kwds)
        self.Layout()
        # end wxGlade

# end of class wx.Panel

class SpectrumButtons_(wx.Panel):
    def __init__(self, *args, **kwds):
        # begin wxGlade: SpectrumButtons_.__init__
        kwds["style"] = kwds.get("style", 0) | wx.BORDER_SUNKEN
        wx.Panel.__init__(self, *args, **kwds)

        sizer_2 = wx.BoxSizer(wx.VERTICAL)

        label_1 = wx.StaticText(self, wx.ID_ANY, _("Spectrum acquisition"))
        sizer_2.Add(label_1, 0, 0, 0)

        grid_sizer_5 = wx.FlexGridSizer(1, 5, 0, 3)
        sizer_2.Add(grid_sizer_5, 1, wx.EXPAND, 0)

        label_2 = wx.StaticText(self, wx.ID_ANY, _("Bands:"))
        grid_sizer_5.Add(label_2, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.spectrum_horizontal_low = wx.ToggleButton(self, wx.ID_ANY, _("H-Low"))
        self.spectrum_horizontal_low.SetToolTip(_("(De)Select horizontal low band"))
        grid_sizer_5.Add(self.spectrum_horizontal_low, 0, wx.EXPAND, 0)

        self.spectrum_horizontal_high = wx.ToggleButton(self, wx.ID_ANY, _("H-High"))
        self.spectrum_horizontal_high.SetToolTip(_("(De)Select horizontal high band"))
        grid_sizer_5.Add(self.spectrum_horizontal_high, 0, wx.EXPAND, 0)

        self.spectrum_vertical_low = wx.ToggleButton(self, wx.ID_ANY, _("V-Low"))
        self.spectrum_vertical_low.SetToolTip(_("(De)Select vertical low band"))
        grid_sizer_5.Add(self.spectrum_vertical_low, 0, wx.EXPAND, 0)

        self.spectrum_vertical_high = wx.ToggleButton(self, wx.ID_ANY, _("V-High"))
        self.spectrum_vertical_high.SetToolTip(_("(De)Select vertical high band"))
        grid_sizer_5.Add(self.spectrum_vertical_high, 0, wx.EXPAND, 0)

        sizer_15 = wx.FlexGridSizer(1, 3, 5, 5)
        sizer_2.Add(sizer_15, 0, 0, 0)

        label_4 = wx.StaticText(self, wx.ID_ANY, _("Action:"))
        sizer_15.Add(label_4, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.acquire_spectrum = wx.ToggleButton(self, wx.ID_ANY, _("Get Spectrum"))
        self.acquire_spectrum.SetToolTip(_("Start spectrum scan - may take a minute"))
        sizer_15.Add(self.acquire_spectrum, 0, wx.EXPAND, 5)

        self.blindscan_button = wx.ToggleButton(self, wx.ID_ANY, _("Blindscan all"))
        sizer_15.Add(self.blindscan_button, 0, 0, 0)

        self.SetSizer(sizer_2)

        self.Layout()

        self.Bind(wx.EVT_TOGGLEBUTTON, self.OnAcquireSpectrum, self.acquire_spectrum)
        self.Bind(wx.EVT_TOGGLEBUTTON, self.OnBlindScan, self.blindscan_button)
        # end wxGlade

    def OnAcquireSpectrum(self, event):  # wxGlade: SpectrumButtons_.<event_handler>
        print("Event handler 'OnAcquireSpectrum' not implemented!")
        event.Skip()

    def OnBlindScan(self, event):  # wxGlade: SpectrumButtons_.<event_handler>
        print("Event handler 'OnBlindScan' not implemented!")
        event.Skip()

# end of class SpectrumButtons_

class TuneMuxPanel_(wx.Panel):
    def __init__(self, *args, **kwds):
        # begin wxGlade: TuneMuxPanel_.__init__
        kwds["style"] = kwds.get("style", 0) | wx.BORDER_SUNKEN
        wx.Panel.__init__(self, *args, **kwds)

        sizer_19 = wx.BoxSizer(wx.VERTICAL)

        label_21 = wx.StaticText(self, wx.ID_ANY, _("Tune mux"))
        sizer_19.Add(label_21, 0, wx.BOTTOM, 3)

        grid_sizer_11 = wx.FlexGridSizer(2, 1, 0, 0)
        sizer_19.Add(grid_sizer_11, 0, 0, 0)

        grid_sizer_12 = wx.FlexGridSizer(1, 6, 0, 5)
        grid_sizer_11.Add(grid_sizer_12, 1, wx.EXPAND, 0)

        self.positioner_mux_sel = DvbsMuxListComboCtrl(self, wx.ID_ANY, "", style=wx.TE_DONTWRAP | wx.TE_LEFT | wx.TE_MULTILINE | wx.TE_READONLY | wx.TE_RICH)
        grid_sizer_12.Add(self.positioner_mux_sel, 1, wx.ALIGN_CENTER_VERTICAL, 0)

        self.Blind = wx.ToggleButton(self, wx.ID_ANY, _("Blind"))
        self.Blind.SetToolTip(_("Blindscan - if set, only frequency and polarisation need to be entered"))
        grid_sizer_12.Add(self.Blind, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        grid_sizer_12.Add((20, 20), 0, 0, 0)

        self.tune_reset_button = wx.Button(self, wx.ID_ANY, _("Reset"))
        self.tune_reset_button.SetToolTip(_("Reset mux data to the values from the mux selected in the dropdown list"))
        grid_sizer_12.Add(self.tune_reset_button, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.tune_button = wx.Button(self, wx.ID_ANY, _("Tune"))
        self.tune_button.SetToolTip(_("Tune the mux using the tuning parameters below"))
        grid_sizer_12.Add(self.tune_button, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.ok_button = wx.Button(self, wx.ID_SAVE, "")
        self.ok_button.SetToolTip(_("Save Control type, usals correction, diseqc12 position and reference mux for this satellite and LNB."))
        grid_sizer_12.Add(self.ok_button, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL | wx.FIXED_MINSIZE, 0)

        grid_sizer_13 = wx.FlexGridSizer(1, 1, 16, 0)
        grid_sizer_11.Add(grid_sizer_13, 1, wx.EXPAND, 0)

        self.panel_2 = wx.Panel(self, wx.ID_ANY)
        grid_sizer_13.Add(self.panel_2, 1, wx.EXPAND, 0)

        sizer_20 = wx.BoxSizer(wx.VERTICAL)

        self.muxedit_grid = PositionerDvbsMuxGrid(self.panel_2, wx.ID_ANY, style=wx.LC_HRULES | wx.LC_NO_HEADER | wx.LC_REPORT | wx.LC_VIRTUAL | wx.LC_VRULES)
        self.muxedit_grid.SetFocus()
        sizer_20.Add(self.muxedit_grid, 0, wx.EXPAND, 0)

        self.panel_2.SetSizer(sizer_20)

        grid_sizer_12.AddGrowableRow(0)
        grid_sizer_12.AddGrowableCol(0)

        grid_sizer_11.AddGrowableRow(1)
        grid_sizer_11.AddGrowableCol(0)

        self.SetSizer(sizer_19)

        self.Layout()

        self.Bind(wx.EVT_TOGGLEBUTTON, self.OnToggleBlindscan, self.Blind)
        self.Bind(wx.EVT_BUTTON, self.OnResetTune, self.tune_reset_button)
        self.Bind(wx.EVT_BUTTON, self.OnTune, self.tune_button)
        self.Bind(wx.EVT_BUTTON, self.OnSave, self.ok_button)
        # end wxGlade

    def OnToggleBlindscan(self, event):  # wxGlade: TuneMuxPanel_.<event_handler>
        print("Event handler 'OnToggleBlindscan' not implemented!")
        event.Skip()

    def OnResetTune(self, event):  # wxGlade: TuneMuxPanel_.<event_handler>
        print("Event handler 'OnResetTune' not implemented!")
        event.Skip()

    def OnTune(self, event):  # wxGlade: TuneMuxPanel_.<event_handler>
        print("Event handler 'OnTune' not implemented!")
        event.Skip()

    def OnSave(self, event):  # wxGlade: TuneMuxPanel_.<event_handler>
        print("Event handler 'OnSave' not implemented!")
        event.Skip()

# end of class TuneMuxPanel_

class SpectrumListPanel_(wx.Panel):
    def __init__(self, *args, **kwds):
        # begin wxGlade: SpectrumListPanel_.__init__
        kwds["style"] = kwds.get("style", 0) | wx.BORDER_SUNKEN
        wx.Panel.__init__(self, *args, **kwds)

        sizer_21 = wx.FlexGridSizer(2, 1, 0, 0)

        label_22 = wx.StaticText(self, wx.ID_ANY, _("Show/Hide spectra"))
        sizer_21.Add(label_22, 0, wx.BOTTOM, 3)

        self.spectrumselect_grid = SpectrumSelectionGrid(self, wx.ID_ANY, style=wx.LC_HRULES | wx.LC_NO_HEADER | wx.LC_REPORT | wx.LC_VIRTUAL | wx.LC_VRULES)
        self.spectrumselect_grid.SetFocus()
        sizer_21.Add(self.spectrumselect_grid, 1, wx.EXPAND, 0)

        sizer_21.AddGrowableRow(1)
        sizer_21.AddGrowableCol(0)
        self.SetSizer(sizer_21)

        self.Layout()
        # end wxGlade

# end of class SpectrumListPanel_

class SpectrumDialog_(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: SpectrumDialog_.__init__
        kwds["style"] = kwds.get("style", 0) | wx.CLOSE_BOX | wx.MAXIMIZE_BOX | wx.MINIMIZE_BOX | wx.RESIZE_BORDER
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((1736, 983))
        self.SetTitle(_("Spectrum"))

        # Menu Bar
        self.main_menubar = wx.MenuBar()
        self.menubar = wx.Menu()
        item = self.menubar.Append(wx.ID_ANY, _("&Quit\tCtrl-Q"), "")
        self.Bind(wx.EVT_MENU, self.OnExit, item)
        self.main_menubar.Append(self.menubar, _("&View"))
        self.menubar = wx.Menu()
        item = self.menubar.Append(wx.ID_ANY, _("Inspect"), "")
        self.Bind(wx.EVT_MENU, self.OnInspect, item)
        item = self.menubar.Append(wx.ID_ANY, _("&Toggle Spectrum\tCtrl-Enter"), "")
        self.Bind(wx.EVT_MENU, self.OnSpectrumSelect, item)
        self.main_menubar.Append(self.menubar, _("&Control"))
        self.edit_menu = wx.Menu()
        self.main_menubar.Append(self.edit_menu, _("&Edit"))
        wxglade_tmp_menu = wx.Menu()
        self.main_menubar.Append(wxglade_tmp_menu, _("&Lists"))
        self.SetMenuBar(self.main_menubar)
        # Menu Bar end

        sizer_102 = wx.FlexGridSizer(3, 1, 10, 0)

        self.spectrum_plot = SpectrumPlot(self, wx.ID_ANY)
        sizer_102.Add(self.spectrum_plot, 1, wx.EXPAND, 0)

        grid_sizer_2 = wx.FlexGridSizer(1, 3, 5, 5)
        sizer_102.Add(grid_sizer_2, 1, wx.EXPAND, 0)

        grid_sizer_1 = wx.FlexGridSizer(2, 1, 5, 0)
        grid_sizer_2.Add(grid_sizer_1, 0, 0, 0)

        grid_sizer_3 = wx.FlexGridSizer(1, 2, 0, 5)
        grid_sizer_1.Add(grid_sizer_3, 0, wx.EXPAND, 0)

        self.signal_info_panel = wx.Panel(self, wx.ID_ANY, style=wx.BORDER_SUNKEN)
        grid_sizer_3.Add(self.signal_info_panel, 1, wx.EXPAND, 0)

        grid_sizer_4 = wx.FlexGridSizer(2, 1, 5, 0)

        label_3 = wx.StaticText(self.signal_info_panel, wx.ID_ANY, _("Signal"))
        grid_sizer_4.Add(label_3, 0, wx.BOTTOM, 2)

        self.signal_panel = positioner_dialog.SignalPanel(self.signal_info_panel, wx.ID_ANY)
        grid_sizer_4.Add(self.signal_panel, 1, wx.EXPAND, 5)

        self.constellation_panel = wx.Panel(self, wx.ID_ANY, style=wx.BORDER_SUNKEN)
        grid_sizer_3.Add(self.constellation_panel, 0, wx.EXPAND, 0)

        sizer_3333 = wx.BoxSizer(wx.VERTICAL)

        label_2345 = wx.StaticText(self.constellation_panel, wx.ID_ANY, _("Constellation"))
        sizer_3333.Add(label_2345, 0, 0, 0)

        self.constellation_plot = ConstellationPlot(self.constellation_panel, wx.ID_ANY)
        sizer_3333.Add(self.constellation_plot, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.EXPAND | wx.SHAPED, 0)

        self.spectrum_buttons_panel = spectrum_dialog.SpectrumButtons(self, wx.ID_ANY)
        grid_sizer_1.Add(self.spectrum_buttons_panel, 0, 0, 5)

        self.tune_mux_panel = positioner_dialog.TuneMuxPanel(self, wx.ID_ANY)
        grid_sizer_2.Add(self.tune_mux_panel, 1, wx.ALL | wx.EXPAND, 8)

        self.spectrumlist_panel = spectrum_dialog.SpectrumListPanel(self, wx.ID_ANY)
        grid_sizer_2.Add(self.spectrumlist_panel, 1, wx.EXPAND, 0)

        sizer_102.Add((20, 5), 0, wx.EXPAND, 0)

        self.constellation_panel.SetSizer(sizer_3333)

        grid_sizer_4.AddGrowableRow(1)
        grid_sizer_4.AddGrowableCol(0)
        self.signal_info_panel.SetSizer(grid_sizer_4)

        grid_sizer_3.AddGrowableRow(0)
        grid_sizer_3.AddGrowableCol(0)
        grid_sizer_3.AddGrowableCol(1)

        grid_sizer_2.AddGrowableCol(0)
        grid_sizer_2.AddGrowableCol(2)

        sizer_102.AddGrowableRow(0)
        sizer_102.AddGrowableCol(0)
        self.SetSizer(sizer_102)

        self.Layout()

        # end wxGlade

    def OnExit(self, event):  # wxGlade: SpectrumDialog_.<event_handler>
        print("Event handler 'OnExit' not implemented!")
        event.Skip()

    def OnInspect(self, event):  # wxGlade: SpectrumDialog_.<event_handler>
        print("Event handler 'OnInspect' not implemented!")
        event.Skip()

    def OnSpectrumSelect(self, event):  # wxGlade: SpectrumDialog_.<event_handler>
        print("Event handler 'OnSpectrumSelect' not implemented!")
        event.Skip()

# end of class SpectrumDialog_

class spectrum_app(wx.App):
    def OnInit(self):
        self.spectrum_dialog = SpectrumDialog_(None, wx.ID_ANY, "")
        self.SetTopWindow(self.spectrum_dialog)
        self.spectrum_dialog.Show()
        return True

# end of class spectrum_app

if __name__ == "__main__":
    gettext.install("neumodvb") # replace with the appropriate catalog name

    neumodvb = spectrum_app(0)
    neumodvb.MainLoop()
